@model List<ContactManagerApp.Models.Contact>

@{
    ViewBag.Title = "Contacts";
}

<!-- Display Error or Success Messages after the form is submitted -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

<h2>Contact Manager</h2>


<form enctype="multipart/form-data" action="@Url.Action("UploadCSV", "Contact")" method="post">
    <div class="form-group">
        <input type="file" name="file" accept=".csv" id="fileInput" style="display:none;" />
        <label for="fileInput" class="btn btn-light mb-3";" style="margin-top: 10px;">Upload CSV</label>
        <span id="fileName" class="ml-3"></span> <!-- Element to display the file name -->
    <input type="submit" value="Submit" class="btn btn-primary mb-3" style="margin-top: 10px;" />
</div>
</form>

<div class="sort-section mb-4 d-flex align-items-center px-3">
    <label for="sortColumn" class="mb-3 mr-2" style="padding-right: 10px;">Sort By:</label>
    <select id="sortColumn" class="form-control d-inline-block w-auto mb-3 mr-3">
        <option value="0">Name</option>
        <option value="1">Date of Birth</option>
        <option value="2">Married</option>
        <option value="3">Phone</option>
        <option value="4">Salary</option>
    </select>

    <label for="sortOrder" class="mb-3 mr-2" style="padding: 10px 10px;">Order:</label>
    <select id="sortOrder" class="form-control d-inline-block w-auto mb-3 mr-2">
        <option value="asc">Ascending</option>
        <option value="desc">Descending</option>
    </select>

    <button onclick="applySort()" class="btn btn-primary mb-3" style="margin-left: 10px;">Sort</button>
</div>

<table id="contactsTable" class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Name</th>
            <th>Date of Birth</th>
            <th>Married</th>
            <th>Phone</th>
            <th>Salary</th>
        </tr>
        <tr>
            <th><input type="text" id="filterName" onkeyup="filterTable()" placeholder="Filter by Name" class="form-control"></th>
            <th><input type="text" id="filterDateOfBirth" onkeyup="filterTable()" placeholder="Filter by Date of Birth" class="form-control"></th>
            <th><input type="text" id="filterStatus" onkeyup="filterTable()" placeholder="Filter by Status" class="form-control"></th>
            <th><input type="text" id="filterPhone" onkeyup="filterTable()" placeholder="Filter by Phone" class="form-control"></th>
            <th><input type="text" id="filterSalary" onkeyup="filterTable()" placeholder="Filter by Salary" class="form-control"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contact in Model)
        {
            <tr data-id="@contact.Id">
                <td contenteditable="true">@contact.Name</td>
                <td contenteditable="true">@contact.DateOfBirth.ToString("yyyy-MM-dd")</td>
                <td contenteditable="true">@contact.MarriedDisplay</td>
                <td contenteditable="true">+@contact.Phone</td>
                <td contenteditable="true">@contact.Salary</td>
                <td>
                    <button class="btn btn-danger delete" data-id="@contact.Id">Delete</button>
                </td>

                <td>
                    <button class="btn btn-success save" data-id="@contact.Id">Save</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Include jQuery and DataTables script -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css"></script>
<script>

    // JavaScript to display the file name when a file is selected
    document.getElementById('fileInput').addEventListener('change', function () {
        var fileName = this.files.length > 0 ? this.files[0].name : '';
        document.getElementById('fileName').textContent = fileName;
    });

    document.addEventListener('DOMContentLoaded', function () {
        var table = new DataTable('#contactsTable', {
            order: [], // Disable initial sorting
            columnDefs: [{
                targets: '_all',
                orderable: false // Disable default sorting
            }]
        });
    });


    let sortDirection = [true, true, true, true, true]; // Tracks sorting direction (true = ascending, false = descending)

    function applySort() {
        const columnIndex = parseInt(document.getElementById("sortColumn").value); // Get selected column index
        const order = document.getElementById("sortOrder").value; // Get selected order (ascending or descending)

        // If the order is 'desc', toggle the sorting direction to false (descending)
        if (order === 'desc') {
            sortDirection[columnIndex] = false;
        } else {
            sortDirection[columnIndex] = true;
        }

        sortTable(columnIndex); // Call the sorting function
    }

    function sortTable(columnIndex) {
        const table = document.getElementById("contactsTable");
        const tbody = table.querySelector("tbody");
        const rows = Array.from(tbody.querySelectorAll("tr")); // Get all table rows from tbody

        const isAscending = sortDirection[columnIndex];

        // Sort rows based on the selected column and direction
        rows.sort((rowA, rowB) => {
            const cellA = rowA.cells[columnIndex].textContent.trim();
            const cellB = rowB.cells[columnIndex].textContent.trim();

            // Try parsing the cells to numbers, if possible
            const numA = parseFloat(cellA);
            const numB = parseFloat(cellB);

            if (!isNaN(numA) && !isNaN(numB)) {
                return isAscending ? numA - numB : numB - numA; // Numeric comparison
            } else {
                return isAscending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA); // String comparison
            }
        });

        // Append sorted rows back to the tbody
        rows.forEach(row => tbody.appendChild(row));

        // Toggle sorting direction for next click
        sortDirection[columnIndex] = !isAscending;
    }

    function filterTable() {
        const table = document.getElementById("contactsTable");
        const rows = table.querySelectorAll("tbody tr");

        const filterName = document.getElementById("filterName").value.toLowerCase();
        const filterDateOfBirth = document.getElementById("filterDateOfBirth").value.toLowerCase();
        const filterStatus = document.getElementById("filterStatus").value.toLowerCase();
        const filterPhone = document.getElementById("filterPhone").value.toLowerCase();
        const filterSalary = document.getElementById("filterSalary").value.toLowerCase();

        rows.forEach(row => {
            const name = row.cells[0].textContent.toLowerCase();
            const dateOfBirth = row.cells[1].textContent.toLowerCase();
            const status = row.cells[2].textContent.toLowerCase();
            const phone = row.cells[3].textContent.toLowerCase();
            const salary = row.cells[4].textContent.toLowerCase();

            // Check if the row matches all the active filters
            const isMatch = (
                (filterName === "" || name.includes(filterName)) &&
                (filterDateOfBirth === "" || dateOfBirth.includes(filterDateOfBirth)) &&
                (filterStatus === "" || status.includes(filterStatus)) &&
                (filterPhone === "" || phone.includes(filterPhone)) &&
                (filterSalary === "" || salary.includes(filterSalary))
            );

            row.style.display = isMatch ? "" : "none"; // Show or hide row based on filter match
        });
    }

    // Save edited contact

    document.querySelectorAll(".save").forEach(function(button) {
        button.addEventListener("click", function() {
            var row = button.closest('tr');
            var id = button.getAttribute("data-id");
            var name = row.querySelector("td:nth-child(1)").textContent;
            var dob = row.querySelector("td:nth-child(2)").textContent;
            var married = row.querySelector("td:nth-child(3)").textContent === "True";
            var phone = row.querySelector("td:nth-child(4)").textContent;
            var salary = parseFloat(row.querySelector("td:nth-child(5)").textContent);
            var xhr = new XMLHttpRequest();
            xhr.open("POST", '@Url.Action("UpdateContact", "Contact")', true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.onload = function() {
                if (xhr.status === 200) {
                    alert("Contact updated successfully!");
                }
            };
            xhr.send("Id=" + encodeURIComponent(id) +
                     "&Name=" + encodeURIComponent(name) +
                     "&DateOfBirth=" + encodeURIComponent(dob) +
                     "&Married=" + encodeURIComponent(married) +
                     "&Phone=" + encodeURIComponent(phone) +
                     "&Salary=" + encodeURIComponent(salary));
        });
    });


    // Delete contact

    document.querySelectorAll(".delete").forEach(function(button) {
        button.addEventListener("click", function() {
            var id = button.getAttribute("data-id");
            var xhr = new XMLHttpRequest();
            xhr.open("POST", '@Url.Action("DeleteContact", "Contact")', true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.onload = function() {
                if (xhr.status === 200) {
                    alert("Contact deleted successfully!");
                    location.reload();
                }
            };
            xhr.send("id=" + encodeURIComponent(id));
        });
    });
</script>
